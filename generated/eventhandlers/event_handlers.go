
// Code generated - DO NOT EDIT.
// This file is generated by event_handler_generator.go

package eventhandlers

import (
	"context"
	"fmt"
	"math/big"

	"github.com/unicornultrafoundation/go-u2u/common"
	"github.com/unicornultrafoundation/go-u2u/core/types"
	"github.com/unicornultrafoundation/go-u2u/crypto"
	"go.uber.org/zap"
)

// EventHandler defines the interface for handling blockchain events
type EventHandler interface {
	HandleEvent(ctx context.Context, log *types.Log, logger *zap.SugaredLogger) error
}

// DefaultHandler is a basic implementation of EventHandler
type DefaultHandler struct{}

func (h *DefaultHandler) HandleEvent(ctx context.Context, log *types.Log, logger *zap.SugaredLogger) error {
	logger.Infow("Default handler called",
		"signature", log.Topics[0].Hex(),
		"contract", log.Address.Hex(),
		"tx", log.TxHash.Hex(),
	)
	return nil
}


// ValueUpdated represents the event data for ValueUpdated(uint256)
type ValueUpdated struct {
	
	NewValue *big.Int // uint256
	
	Raw *types.Log
}

func UnpackValueUpdated(log *types.Log) (*ValueUpdated, error) {
	event := new(ValueUpdated)
	event.Raw = log
	var dataOffset int
	
	
		
		if len(log.Data) < dataOffset+32 {
			return nil, fmt.Errorf("insufficient data for non-indexed parameter newValue")
		}
		event.NewValue = new(big.Int).SetBytes(log.Data[dataOffset:dataOffset+32])
		dataOffset += 32
		
	
	
	_ = dataOffset
	return event, nil
}


// EventSignatures maps event signatures to their hex representations
var EventSignatures = map[string]string{
	"ValueUpdated(uint256)": common.HexToHash(KeccakHash("ValueUpdated(uint256)")).Hex(),
}

// HandlerRegistry maps event signatures to their handlers
var HandlerRegistry = map[string]EventHandler{
	EventSignatures["ValueUpdated(uint256)"]: &DefaultHandler{},
}

// KeccakHash returns the Keccak256 hash of a string
func KeccakHash(s string) string {
	return common.BytesToHash(crypto.Keccak256([]byte(s))).Hex()
}

// Event signatures
var ValueUpdatedEventSignature = crypto.Keccak256Hash([]byte("ValueUpdated(uint256)")).Hex()
