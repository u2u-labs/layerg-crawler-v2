// Code generated by cmd/generate/query-prepare.go; DO NOT EDIT.
package generated

import (
	"github.com/graphql-go/graphql"
	"github.com/u2u-labs/layerg-crawler/cmd/core"
)



var StringFilterType = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "StringFilter",
	Fields: graphql.InputObjectConfigFieldMap{
		"gte": &graphql.InputObjectFieldConfig{Type: graphql.String},
		"gt":  &graphql.InputObjectFieldConfig{Type: graphql.String},
		"eq":  &graphql.InputObjectFieldConfig{Type: graphql.String},
		"lt":  &graphql.InputObjectFieldConfig{Type: graphql.String},
		"lte": &graphql.InputObjectFieldConfig{Type: graphql.String},
	},
})
var BigIntFilterType = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "BigIntFilter",
	Fields: graphql.InputObjectConfigFieldMap{
		"gte": &graphql.InputObjectFieldConfig{Type: core.BigIntType},
		"gt":  &graphql.InputObjectFieldConfig{Type: core.BigIntType},
		"eq":  &graphql.InputObjectFieldConfig{Type: core.BigIntType},
		"lt":  &graphql.InputObjectFieldConfig{Type: core.BigIntType},
		"lte": &graphql.InputObjectFieldConfig{Type: core.BigIntType},
	},
})
var IDFilterType = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "IDFilter",
	Fields: graphql.InputObjectConfigFieldMap{
		"gte": &graphql.InputObjectFieldConfig{Type: graphql.ID},
		"gt":  &graphql.InputObjectFieldConfig{Type: graphql.ID},
		"eq":  &graphql.InputObjectFieldConfig{Type: graphql.ID},
		"lt":  &graphql.InputObjectFieldConfig{Type: graphql.ID},
		"lte": &graphql.InputObjectFieldConfig{Type: graphql.ID},
	},
})

func CreateQueryFields(resolver *core.QueryResolver) graphql.Fields {
	// Pre-declare all types to handle forward references
	
	var ValueType *graphql.Object
	

	// Define all input types first since they don't have relationships
	
	var ValueWhereInputFields = graphql.InputObjectConfigFieldMap{
		"id": &graphql.InputObjectFieldConfig{Type: IDFilterType},
		"Value": &graphql.InputObjectFieldConfig{Type: BigIntFilterType},
		"Sender": &graphql.InputObjectFieldConfig{Type: StringFilterType},
		
		"AND": &graphql.InputObjectFieldConfig{},
		"OR":  &graphql.InputObjectFieldConfig{},
	}
	var ValueWhereInputType = graphql.NewInputObject(graphql.InputObjectConfig{
		Name:   "ValueWhereInput",
		Fields: ValueWhereInputFields,
	})
	ValueWhereInputFields["AND"].Type = graphql.NewList(ValueWhereInputType)
	ValueWhereInputFields["OR"].Type = graphql.NewList(ValueWhereInputType)
	

	// Now define all object types with their relationships
	
	ValueType = graphql.NewObject(graphql.ObjectConfig{
		Name: "Value",
		Fields: graphql.FieldsThunk(func() graphql.Fields {
			return graphql.Fields{
				
				"id": &graphql.Field{
					Type: graphql.ID,
				},
				
				"Value": &graphql.Field{
					Type: core.BigIntType,
				},
				
				"Sender": &graphql.Field{
					Type: graphql.String,
				},
				
			}
		}),
	})
	

	return graphql.Fields{
		
		"Value": &graphql.Field{
			Type: ValueType,
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{Type: graphql.NewNonNull(graphql.ID)},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return resolver.ResolveSingle("Value", p)
			},
		},
		"Values": &graphql.Field{
			Type: graphql.NewList(ValueType),
			Args: graphql.FieldConfigArgument{
				"page":  &graphql.ArgumentConfig{Type: graphql.Int},
				"limit": &graphql.ArgumentConfig{Type: graphql.Int},
				"order": &graphql.ArgumentConfig{Type: graphql.String},
				"where": &graphql.ArgumentConfig{Type: ValueWhereInputType},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return resolver.ResolveMultiple("Value", p)
			},
		},
		
	}
}