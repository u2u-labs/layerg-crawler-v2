// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: graphql.sql

package graphqldb

import (
	"context"
	"database/sql"
)

const createCollection = `-- name: CreateCollection :one
INSERT INTO collection (
    id, address, type
) VALUES ($1, $2, $3)
RETURNING id, address, type
`

type CreateCollectionParams struct {
	ID      string         `json:"id"`
	Address string         `json:"address"`
	Type    sql.NullString `json:"type"`
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) (Collection, error) {
	row := q.db.QueryRowContext(ctx, createCollection, arg.ID, arg.Address, arg.Type)
	var i Collection
	err := row.Scan(&i.ID, &i.Address, &i.Type)
	return i, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO post (
    id, title, content, publisheddate, author
) VALUES ($1, $2, $3, $4, $5)
RETURNING id, title, content, publisheddate, author
`

type CreatePostParams struct {
	ID            string         `json:"id"`
	Title         string         `json:"title"`
	Content       sql.NullString `json:"content"`
	Publisheddate sql.NullTime   `json:"publisheddate"`
	Author        sql.NullString `json:"author"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Publisheddate,
		arg.Author,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Publisheddate,
		&i.Author,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
    id, name, email, createddate, isactive, profile
) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, email, createddate, isactive, profile
`

type CreateUserParams struct {
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Email       sql.NullString `json:"email"`
	Createddate sql.NullTime   `json:"createddate"`
	Isactive    sql.NullBool   `json:"isactive"`
	Profile     sql.NullString `json:"profile"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Createddate,
		arg.Isactive,
		arg.Profile,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Createddate,
		&i.Isactive,
		&i.Profile,
	)
	return i, err
}

const createUserProfile = `-- name: CreateUserProfile :one
INSERT INTO userprofile (
    id, bio, avatarurl
) VALUES ($1, $2, $3)
RETURNING id, bio, avatarurl
`

type CreateUserProfileParams struct {
	ID        string         `json:"id"`
	Bio       sql.NullString `json:"bio"`
	Avatarurl sql.NullString `json:"avatarurl"`
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (Userprofile, error) {
	row := q.db.QueryRowContext(ctx, createUserProfile, arg.ID, arg.Bio, arg.Avatarurl)
	var i Userprofile
	err := row.Scan(&i.ID, &i.Bio, &i.Avatarurl)
	return i, err
}

const getCollectionByAddress = `-- name: GetCollectionByAddress :one
SELECT id, address, type FROM collection WHERE address = $1
`

func (q *Queries) GetCollectionByAddress(ctx context.Context, address string) (Collection, error) {
	row := q.db.QueryRowContext(ctx, getCollectionByAddress, address)
	var i Collection
	err := row.Scan(&i.ID, &i.Address, &i.Type)
	return i, err
}

const getPostsByAuthor = `-- name: GetPostsByAuthor :many
SELECT id, title, content, publisheddate, author FROM post WHERE author = $1
`

func (q *Queries) GetPostsByAuthor(ctx context.Context, author sql.NullString) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByAuthor, author)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Publisheddate,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, createddate, isactive, profile FROM "user" WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Createddate,
		&i.Isactive,
		&i.Profile,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, email, createddate, isactive, profile FROM "user" WHERE name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Createddate,
		&i.Isactive,
		&i.Profile,
	)
	return i, err
}
