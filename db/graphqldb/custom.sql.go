// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: custom.sql

package graphqldb

import (
	"context"
)

const getItemByTokenIdAndContract = `-- name: GetItemByTokenIdAndContract :one
SELECT id, token_id, token_uri, owner_id, contract, created_at FROM "item" WHERE token_id = $1 AND contract = $2  LIMIT 1
`

type GetItemByTokenIdAndContractParams struct {
	TokenID  string `json:"token_id"`
	Contract string `json:"contract"`
}

func (q *Queries) GetItemByTokenIdAndContract(ctx context.Context, arg GetItemByTokenIdAndContractParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItemByTokenIdAndContract, arg.TokenID, arg.Contract)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.TokenID,
		&i.TokenUri,
		&i.OwnerID,
		&i.Contract,
		&i.CreatedAt,
	)
	return i, err
}

const getOrCreateUser = `-- name: GetOrCreateUser :one
INSERT INTO "user" ("id") 
VALUES ($1) 
ON CONFLICT (id) DO UPDATE SET id = EXCLUDED.id
RETURNING id, created_at
`

// Add a new query to get or create user
func (q *Queries) GetOrCreateUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getOrCreateUser, id)
	var i User
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}
