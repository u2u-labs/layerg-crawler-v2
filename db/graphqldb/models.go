// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package graphqldb

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type ItemStandard string

const (
	ItemStandardERC721  ItemStandard = "ERC721"
	ItemStandardERC1155 ItemStandard = "ERC1155"
)

func (e *ItemStandard) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ItemStandard(s)
	case string:
		*e = ItemStandard(s)
	default:
		return fmt.Errorf("unsupported scan type for ItemStandard: %T", src)
	}
	return nil
}

type NullItemStandard struct {
	ItemStandard ItemStandard `json:"ItemStandard"`
	Valid        bool         `json:"valid"` // Valid is true if ItemStandard is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullItemStandard) Scan(value interface{}) error {
	if value == nil {
		ns.ItemStandard, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ItemStandard.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullItemStandard) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ItemStandard), nil
}

type Balance struct {
	ID        string    `json:"id"`
	ItemID    string    `json:"item_id"`
	OwnerID   string    `json:"owner_id"`
	Value     string    `json:"value"`
	UpdatedAt string    `json:"updated_at"`
	Contract  string    `json:"contract"`
	CreatedAt time.Time `json:"created_at"`
}

type Item struct {
	ID        string    `json:"id"`
	TokenID   string    `json:"token_id"`
	TokenUri  string    `json:"token_uri"`
	Standard  string    `json:"standard"`
	CreatedAt time.Time `json:"created_at"`
}

type MetadataUpdateRecord struct {
	ID        string    `json:"id"`
	TokenID   string    `json:"token_id"`
	ActorID   string    `json:"actor_id"`
	Timestamp string    `json:"timestamp"`
	CreatedAt time.Time `json:"created_at"`
}

type User struct {
	ID        string    `json:"id"`
	CreatedAt time.Time `json:"created_at"`
}
