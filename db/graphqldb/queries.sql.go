// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package graphqldb

import (
	"context"
)

const createValue = `-- name: CreateValue :one
INSERT INTO "value" ("id", "value", "sender") VALUES ($1, $2, $3) RETURNING id, value, sender, created_at
`

type CreateValueParams struct {
	ID     string `json:"id"`
	Value  string `json:"value"`
	Sender string `json:"sender"`
}

func (q *Queries) CreateValue(ctx context.Context, arg CreateValueParams) (Value, error) {
	row := q.db.QueryRowContext(ctx, createValue, arg.ID, arg.Value, arg.Sender)
	var i Value
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.Sender,
		&i.CreatedAt,
	)
	return i, err
}

const deleteValue = `-- name: DeleteValue :exec
DELETE FROM "value" WHERE id = $1
`

func (q *Queries) DeleteValue(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteValue, id)
	return err
}

const getValue = `-- name: GetValue :one
SELECT id, value, sender, created_at FROM "value" WHERE id = $1
`

func (q *Queries) GetValue(ctx context.Context, id string) (Value, error) {
	row := q.db.QueryRowContext(ctx, getValue, id)
	var i Value
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.Sender,
		&i.CreatedAt,
	)
	return i, err
}

const listValue = `-- name: ListValue :many
SELECT id, value, sender, created_at FROM "value"
`

func (q *Queries) ListValue(ctx context.Context) ([]Value, error) {
	rows, err := q.db.QueryContext(ctx, listValue)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Value{}
	for rows.Next() {
		var i Value
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.Sender,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateValue = `-- name: UpdateValue :one
UPDATE "value" SET "value" = $2, "sender" = $3 WHERE id = $1 RETURNING id, value, sender, created_at
`

type UpdateValueParams struct {
	ID     string `json:"id"`
	Value  string `json:"value"`
	Sender string `json:"sender"`
}

func (q *Queries) UpdateValue(ctx context.Context, arg UpdateValueParams) (Value, error) {
	row := q.db.QueryRowContext(ctx, updateValue, arg.ID, arg.Value, arg.Sender)
	var i Value
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.Sender,
		&i.CreatedAt,
	)
	return i, err
}
