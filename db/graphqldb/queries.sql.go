// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package graphqldb

import (
	"context"
	"database/sql"
)

const createCollection = `-- name: CreateCollection :one
INSERT INTO "collection" ("address", "type") VALUES ($1, $2) RETURNING id, address, type
`

type CreateCollectionParams struct {
	Address string         `json:"address"`
	Type    sql.NullString `json:"type"`
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) (Collection, error) {
	row := q.db.QueryRowContext(ctx, createCollection, arg.Address, arg.Type)
	var i Collection
	err := row.Scan(&i.ID, &i.Address, &i.Type)
	return i, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO "post" ("title", "content", "published_date", "author_id") VALUES ($1, $2, $3, $4) RETURNING id, title, content, published_date, author_id
`

type CreatePostParams struct {
	Title         string         `json:"title"`
	Content       sql.NullString `json:"content"`
	PublishedDate sql.NullTime   `json:"published_date"`
	AuthorID      sql.NullInt32  `json:"author_id"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Title,
		arg.Content,
		arg.PublishedDate,
		arg.AuthorID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.PublishedDate,
		&i.AuthorID,
	)
	return i, err
}

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO "transfer" ("from", "to", "amount", "timestamp") VALUES ($1, $2, $3, $4) RETURNING id, "from", "to", amount, timestamp
`

type CreateTransferParams struct {
	From      string         `json:"from"`
	To        string         `json:"to"`
	Amount    sql.NullString `json:"amount"`
	Timestamp sql.NullTime   `json:"timestamp"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer,
		arg.From,
		arg.To,
		arg.Amount,
		arg.Timestamp,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.From,
		&i.To,
		&i.Amount,
		&i.Timestamp,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" ("name", "email", "created_date", "is_active", "profile_id") VALUES ($1, $2, $3, $4, $5) RETURNING id, name, email, created_date, is_active, profile_id
`

type CreateUserParams struct {
	Name        string         `json:"name"`
	Email       sql.NullString `json:"email"`
	CreatedDate sql.NullTime   `json:"created_date"`
	IsActive    sql.NullBool   `json:"is_active"`
	ProfileID   sql.NullInt32  `json:"profile_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.CreatedDate,
		arg.IsActive,
		arg.ProfileID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedDate,
		&i.IsActive,
		&i.ProfileID,
	)
	return i, err
}

const createUserProfile = `-- name: CreateUserProfile :one
INSERT INTO "user_profile" ("bio", "avatar_url") VALUES ($1, $2) RETURNING id, bio, avatar_url
`

type CreateUserProfileParams struct {
	Bio       sql.NullString `json:"bio"`
	AvatarUrl sql.NullString `json:"avatar_url"`
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRowContext(ctx, createUserProfile, arg.Bio, arg.AvatarUrl)
	var i UserProfile
	err := row.Scan(&i.ID, &i.Bio, &i.AvatarUrl)
	return i, err
}

const deleteCollection = `-- name: DeleteCollection :exec
DELETE FROM "collection" WHERE id = $1
`

func (q *Queries) DeleteCollection(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCollection, id)
	return err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM "post" WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const deleteTransfer = `-- name: DeleteTransfer :exec
DELETE FROM "transfer" WHERE id = $1
`

func (q *Queries) DeleteTransfer(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTransfer, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user" WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const deleteUserProfile = `-- name: DeleteUserProfile :exec
DELETE FROM "user_profile" WHERE id = $1
`

func (q *Queries) DeleteUserProfile(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserProfile, id)
	return err
}

const getCollection = `-- name: GetCollection :one
SELECT id, address, type FROM "collection" WHERE id = $1
`

func (q *Queries) GetCollection(ctx context.Context, id int32) (Collection, error) {
	row := q.db.QueryRowContext(ctx, getCollection, id)
	var i Collection
	err := row.Scan(&i.ID, &i.Address, &i.Type)
	return i, err
}

const getPost = `-- name: GetPost :one
SELECT id, title, content, published_date, author_id FROM "post" WHERE id = $1
`

func (q *Queries) GetPost(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.PublishedDate,
		&i.AuthorID,
	)
	return i, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, "from", "to", amount, timestamp FROM "transfer" WHERE id = $1
`

func (q *Queries) GetTransfer(ctx context.Context, id int32) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.From,
		&i.To,
		&i.Amount,
		&i.Timestamp,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, created_date, is_active, profile_id FROM "user" WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedDate,
		&i.IsActive,
		&i.ProfileID,
	)
	return i, err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT id, bio, avatar_url FROM "user_profile" WHERE id = $1
`

func (q *Queries) GetUserProfile(ctx context.Context, id int32) (UserProfile, error) {
	row := q.db.QueryRowContext(ctx, getUserProfile, id)
	var i UserProfile
	err := row.Scan(&i.ID, &i.Bio, &i.AvatarUrl)
	return i, err
}

const listCollection = `-- name: ListCollection :many
SELECT id, address, type FROM "collection"
`

func (q *Queries) ListCollection(ctx context.Context) ([]Collection, error) {
	rows, err := q.db.QueryContext(ctx, listCollection)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Collection{}
	for rows.Next() {
		var i Collection
		if err := rows.Scan(&i.ID, &i.Address, &i.Type); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPost = `-- name: ListPost :many
SELECT id, title, content, published_date, author_id FROM "post"
`

func (q *Queries) ListPost(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPost)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.PublishedDate,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransfer = `-- name: ListTransfer :many
SELECT id, "from", "to", amount, timestamp FROM "transfer"
`

func (q *Queries) ListTransfer(ctx context.Context) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfer)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.From,
			&i.To,
			&i.Amount,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUser = `-- name: ListUser :many
SELECT id, name, email, created_date, is_active, profile_id FROM "user"
`

func (q *Queries) ListUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedDate,
			&i.IsActive,
			&i.ProfileID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserProfile = `-- name: ListUserProfile :many
SELECT id, bio, avatar_url FROM "user_profile"
`

func (q *Queries) ListUserProfile(ctx context.Context) ([]UserProfile, error) {
	rows, err := q.db.QueryContext(ctx, listUserProfile)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserProfile{}
	for rows.Next() {
		var i UserProfile
		if err := rows.Scan(&i.ID, &i.Bio, &i.AvatarUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCollection = `-- name: UpdateCollection :one
UPDATE "collection" SET "address" = $2, "type" = $3 WHERE id = $1 RETURNING id, address, type
`

type UpdateCollectionParams struct {
	ID      int32          `json:"id"`
	Address string         `json:"address"`
	Type    sql.NullString `json:"type"`
}

func (q *Queries) UpdateCollection(ctx context.Context, arg UpdateCollectionParams) (Collection, error) {
	row := q.db.QueryRowContext(ctx, updateCollection, arg.ID, arg.Address, arg.Type)
	var i Collection
	err := row.Scan(&i.ID, &i.Address, &i.Type)
	return i, err
}

const updatePost = `-- name: UpdatePost :one
UPDATE "post" SET "title" = $2, "content" = $3, "published_date" = $4, "author_id" = $5 WHERE id = $1 RETURNING id, title, content, published_date, author_id
`

type UpdatePostParams struct {
	ID            int32          `json:"id"`
	Title         string         `json:"title"`
	Content       sql.NullString `json:"content"`
	PublishedDate sql.NullTime   `json:"published_date"`
	AuthorID      sql.NullInt32  `json:"author_id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.PublishedDate,
		arg.AuthorID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.PublishedDate,
		&i.AuthorID,
	)
	return i, err
}

const updateTransfer = `-- name: UpdateTransfer :one
UPDATE "transfer" SET "from" = $2, "to" = $3, "amount" = $4, "timestamp" = $5 WHERE id = $1 RETURNING id, "from", "to", amount, timestamp
`

type UpdateTransferParams struct {
	ID        int32          `json:"id"`
	From      string         `json:"from"`
	To        string         `json:"to"`
	Amount    sql.NullString `json:"amount"`
	Timestamp sql.NullTime   `json:"timestamp"`
}

func (q *Queries) UpdateTransfer(ctx context.Context, arg UpdateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, updateTransfer,
		arg.ID,
		arg.From,
		arg.To,
		arg.Amount,
		arg.Timestamp,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.From,
		&i.To,
		&i.Amount,
		&i.Timestamp,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user" SET "name" = $2, "email" = $3, "created_date" = $4, "is_active" = $5, "profile_id" = $6 WHERE id = $1 RETURNING id, name, email, created_date, is_active, profile_id
`

type UpdateUserParams struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Email       sql.NullString `json:"email"`
	CreatedDate sql.NullTime   `json:"created_date"`
	IsActive    sql.NullBool   `json:"is_active"`
	ProfileID   sql.NullInt32  `json:"profile_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.CreatedDate,
		arg.IsActive,
		arg.ProfileID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedDate,
		&i.IsActive,
		&i.ProfileID,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE "user_profile" SET "bio" = $2, "avatar_url" = $3 WHERE id = $1 RETURNING id, bio, avatar_url
`

type UpdateUserProfileParams struct {
	ID        int32          `json:"id"`
	Bio       sql.NullString `json:"bio"`
	AvatarUrl sql.NullString `json:"avatar_url"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRowContext(ctx, updateUserProfile, arg.ID, arg.Bio, arg.AvatarUrl)
	var i UserProfile
	err := row.Scan(&i.ID, &i.Bio, &i.AvatarUrl)
	return i, err
}
