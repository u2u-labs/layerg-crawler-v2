// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: erc_721_asset.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const add721Asset = `-- name: Add721Asset :exec
INSERT INTO
    erc_721_collection_assets (asset_id, token_id, owner, attributes)
VALUES (
    $1, $2, $3, $4
) RETURNING id, chain_id, asset_id, token_id, owner, attributes, created_at, updated_at
`

type Add721AssetParams struct {
	AssetID    string
	TokenID    string
	Owner      string
	Attributes pqtype.NullRawMessage
}

func (q *Queries) Add721Asset(ctx context.Context, arg Add721AssetParams) error {
	_, err := q.db.ExecContext(ctx, add721Asset,
		arg.AssetID,
		arg.TokenID,
		arg.Owner,
		arg.Attributes,
	)
	return err
}

const delete721Asset = `-- name: Delete721Asset :exec
DELETE 
FROM erc_721_collection_assets
WHERE
    id = $1
`

func (q *Queries) Delete721Asset(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, delete721Asset, id)
	return err
}

const get721AssetByAssetId = `-- name: Get721AssetByAssetId :many
SELECT id, chain_id, asset_id, token_id, owner, attributes, created_at, updated_at FROM erc_721_collection_assets WHERE asset_id = $1
`

func (q *Queries) Get721AssetByAssetId(ctx context.Context, assetID string) ([]Erc721CollectionAsset, error) {
	rows, err := q.db.QueryContext(ctx, get721AssetByAssetId, assetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Erc721CollectionAsset
	for rows.Next() {
		var i Erc721CollectionAsset
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.AssetID,
			&i.TokenID,
			&i.Owner,
			&i.Attributes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const get721AssetByAssetIdAndTokenId = `-- name: Get721AssetByAssetIdAndTokenId :one
SELECT id, chain_id, asset_id, token_id, owner, attributes, created_at, updated_at FROM erc_721_collection_assets
WHERE
    asset_id = $1
    AND token_id = $2
`

type Get721AssetByAssetIdAndTokenIdParams struct {
	AssetID string
	TokenID string
}

func (q *Queries) Get721AssetByAssetIdAndTokenId(ctx context.Context, arg Get721AssetByAssetIdAndTokenIdParams) (Erc721CollectionAsset, error) {
	row := q.db.QueryRowContext(ctx, get721AssetByAssetIdAndTokenId, arg.AssetID, arg.TokenID)
	var i Erc721CollectionAsset
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.AssetID,
		&i.TokenID,
		&i.Owner,
		&i.Attributes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const get721AssetByOwner = `-- name: Get721AssetByOwner :many
SELECT id, chain_id, asset_id, token_id, owner, attributes, created_at, updated_at FROM erc_721_collection_assets
WHERE
    owner = $1
`

func (q *Queries) Get721AssetByOwner(ctx context.Context, owner string) ([]Erc721CollectionAsset, error) {
	rows, err := q.db.QueryContext(ctx, get721AssetByOwner, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Erc721CollectionAsset
	for rows.Next() {
		var i Erc721CollectionAsset
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.AssetID,
			&i.TokenID,
			&i.Owner,
			&i.Attributes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update721Asset = `-- name: Update721Asset :exec
UPDATE erc_721_collection_assets
SET
    owner = $2 
WHERE 
    id = $1
`

type Update721AssetParams struct {
	ID    uuid.UUID
	Owner string
}

func (q *Queries) Update721Asset(ctx context.Context, arg Update721AssetParams) error {
	_, err := q.db.ExecContext(ctx, update721Asset, arg.ID, arg.Owner)
	return err
}
