// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: backfill_crawler.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addBackfillCrawler = `-- name: AddBackfillCrawler :exec
INSERT INTO backfill_crawlers (
    chain_id, collection_address, current_block
)
VALUES (
    $1, $2, $3
) RETURNING id, chain_id, collection_address, current_block, status, created_at
`

type AddBackfillCrawlerParams struct {
	ChainID           int32  `json:"chainId"`
	CollectionAddress string `json:"collectionAddress"`
	CurrentBlock      int64  `json:"currentBlock"`
}

func (q *Queries) AddBackfillCrawler(ctx context.Context, arg AddBackfillCrawlerParams) error {
	_, err := q.db.ExecContext(ctx, addBackfillCrawler, arg.ChainID, arg.CollectionAddress, arg.CurrentBlock)
	return err
}

const getCrawlingBackfillCrawler = `-- name: GetCrawlingBackfillCrawler :many
SELECT id, chain_id, collection_address, current_block, status, created_at FROM backfill_crawlers 
WHERE status = crawler_status('CRAWLING')
`

func (q *Queries) GetCrawlingBackfillCrawler(ctx context.Context) ([]BackfillCrawler, error) {
	rows, err := q.db.QueryContext(ctx, getCrawlingBackfillCrawler)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BackfillCrawler
	for rows.Next() {
		var i BackfillCrawler
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.CollectionAddress,
			&i.CurrentBlock,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCrawlingBackfill = `-- name: UpdateCrawlingBackfill :exec
UPDATE backfill_crawlers
SET 
    status = COALESCE($2, status),            
    current_block = COALESCE($3, current_block)  
WHERE id = $1
`

type UpdateCrawlingBackfillParams struct {
	ID           uuid.UUID         `json:"id"`
	Status       NullCrawlerStatus `json:"status"`
	CurrentBlock int64             `json:"currentBlock"`
}

func (q *Queries) UpdateCrawlingBackfill(ctx context.Context, arg UpdateCrawlingBackfillParams) error {
	_, err := q.db.ExecContext(ctx, updateCrawlingBackfill, arg.ID, arg.Status, arg.CurrentBlock)
	return err
}
