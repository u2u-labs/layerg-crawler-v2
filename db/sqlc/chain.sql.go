// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chain.sql

package db

import (
	"context"
)

const getAllChain = `-- name: GetAllChain :many
SELECT id, chain, name, rpc_url, chain_id, explorer, latest_block, block_time FROM chains
`

func (q *Queries) GetAllChain(ctx context.Context) ([]Chain, error) {
	rows, err := q.db.QueryContext(ctx, getAllChain)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chain
	for rows.Next() {
		var i Chain
		if err := rows.Scan(
			&i.ID,
			&i.Chain,
			&i.Name,
			&i.RpcUrl,
			&i.ChainID,
			&i.Explorer,
			&i.LatestBlock,
			&i.BlockTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChainById = `-- name: GetChainById :one
SELECT id, chain, name, rpc_url, chain_id, explorer, latest_block, block_time FROM chains WHERE id = $1
`

func (q *Queries) GetChainById(ctx context.Context, id int32) (Chain, error) {
	row := q.db.QueryRowContext(ctx, getChainById, id)
	var i Chain
	err := row.Scan(
		&i.ID,
		&i.Chain,
		&i.Name,
		&i.RpcUrl,
		&i.ChainID,
		&i.Explorer,
		&i.LatestBlock,
		&i.BlockTime,
	)
	return i, err
}
