// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: asset_collection.sql

package db

import (
	"context"
	"database/sql"
)

const addNewAsset = `-- name: AddNewAsset :exec
INSERT INTO assets (
    id, chain_id, collection_address, type, decimal_data, initial_block, last_updated
)
VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, chain_id, collection_address, type, created_at, updated_at, decimal_data, initial_block, last_updated
`

type AddNewAssetParams struct {
	ID                string
	ChainID           int32
	CollectionAddress string
	Type              AssetType
	DecimalData       sql.NullInt16
	InitialBlock      sql.NullInt64
	LastUpdated       sql.NullTime
}

func (q *Queries) AddNewAsset(ctx context.Context, arg AddNewAssetParams) error {
	_, err := q.db.ExecContext(ctx, addNewAsset,
		arg.ID,
		arg.ChainID,
		arg.CollectionAddress,
		arg.Type,
		arg.DecimalData,
		arg.InitialBlock,
		arg.LastUpdated,
	)
	return err
}

const getAssetByChainIdAndContractAddress = `-- name: GetAssetByChainIdAndContractAddress :one
SELECT id, chain_id, collection_address, type, created_at, updated_at, decimal_data, initial_block, last_updated FROM assets 
WHERE chain_id = $1 
AND collection_address = $2
`

type GetAssetByChainIdAndContractAddressParams struct {
	ChainID           int32
	CollectionAddress string
}

func (q *Queries) GetAssetByChainIdAndContractAddress(ctx context.Context, arg GetAssetByChainIdAndContractAddressParams) (Asset, error) {
	row := q.db.QueryRowContext(ctx, getAssetByChainIdAndContractAddress, arg.ChainID, arg.CollectionAddress)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.CollectionAddress,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DecimalData,
		&i.InitialBlock,
		&i.LastUpdated,
	)
	return i, err
}
